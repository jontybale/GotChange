<?php

/** @see ModelTestCase */
require_once 'ModelTestCase.php';

/** @see GotChange_Model_CashRegister */
require_once APPLICATION_PATH . '/models/CashRegister.php';

/**
 * Test class for GotChange_Model_CashRegister.
 * Generated by PHPUnit on 2011-09-25 at 18:58:26.
 */
class GotChange_Model_CashRegisterTest extends ModelTestCase
{
    /**
     * test construct with valid coins with ordering
     */
    public function testConstruct()
    {
        // assign
        $coins = array(1,2,3,4,5);
        $expected = array(5,4,3,2,1);
        
        // act
        $object = new \GotChange_Model_CashRegister($coins);
        
        // assert
        $this->assertEquals($expected, $object->getCoinValues());
    }
    
    /**
     * test construct with invalid coins throws an invalid arg exception
     * @expectedException \InvalidArgumentException
     */
    public function testConstructWithInvalidCoinsThrows()
    {
        // assign
        $coins = array('test','w',2,14);
        
        // act
        $object = new \GotChange_Model_CashRegister($coins);
    }
    
    /**
     * ensure that calculateChange throws when provided with a non numeric param
     * @expectedException \InvalidArgumentException
     */
    public function testCalculateChangeWithNonNumericThrows()
    {
        // assign
        $object = $this->setUpCashRegister();
        $amount = 'Â£35.20';
        
        // act
        $object->calculateChange($amount);
    }
    
    /**
     * setup object with coins which produce a remainder from amount when trying
     * to calculate change.
     * @expectedException \GotChange_Model_Exception
     */
    public function testCalculateChangeWithImpossibleCoinsAndAmountThrows()
    {
        // assign
        $object = $this->setUpCashRegister(array(7));
        $amount = 12;
        
        // act
        $object->calculateChange($amount);
    }
    
    /**
     * Test a sucessfull caculation of change
     */
    public function testCalculateChangeSuccess()
    {
        // assign
        $object = $this->setUpCashRegister();
        $amount = '153';
        $expected = array(
            '100' => 1,
            '50' => 1,
            '2' => 1,
            '1' => 1
        );
        
        // act
        $actual = $object->calculateChange($amount);
        
        // assert
        $this->assertEquals($expected, $actual);
    }
    
    /**
     * test helper to create our cash register with coins (includes default)
     * @param array $coins
     * @return \GotChange_Model_CashRegister
     */
    private function setUpCashRegister($coins = array(200,100,50,20,2,1))
    {
        return new \GotChange_Model_CashRegister($coins);
    }

}

?>
