<?php

/** @see \GetChange_Validator_UKCurrency */
require_once APPLICATION_PATH . '/validators/UKCurrency.php';

/**
 * Test class for GotChange_Validate_UKCurrency.
 * Generated by PHPUnit on 2011-09-25 at 15:32:27.
 * @todo JEB may require additional test cases, need to review.
 */
class GotChange_Validate_UKCurrencyTest extends PHPUnit_Framework_TestCase
{

    /**
     * @var \GotChange_Validate_UKCurrency
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new GotChange_Validate_UKCurrency();
    }

    /**
     * test with invalid empty string
     */
    public function testIsValidFalseWithEmptyString()
    {
        // assign
        $input = '';
        
        // act
        $actual = $this->object->isValid($input);
        $errors = $this->object->getErrors();
        
        // assert
        $this->assertFalse($actual);
        $this->assertEquals(
                GotChange_Validate_UKCurrency::MSG_UKCURRENCY_FORMAT,
                $errors[0]
        );
    }
    
    /**
     * test with non-numeric characters
     */
    public function testIsValidFalseWithNonNumeric()
    {
        // assign
        $input = '1x';
        
        // act
        $actual = $this->object->isValid($input);
        $errors = $this->object->getErrors();
        
        // assert
        $this->assertFalse($actual);
        $this->assertEquals(
                GotChange_Validate_UKCurrency::MSG_UKCURRENCY_INVALID,
                $errors[0]
        );
    }
    
    /**
     * test with missing digits
     */
    public function testIsValidFalseWithMissingDigits()
    {
        // assign
        $input = '£p';
        
        // act
        $actual = $this->object->isValid($input);
        $errors = $this->object->getErrors();
        
        // assert
        $this->assertFalse($actual);
        $this->assertEquals(
                GotChange_Validate_UKCurrency::MSG_UKCURRENCY_FORMAT,
                $errors[0]
        );
    }
    
    /**
     * test with a valid string
     */
    public function testIsValidTrue()
    {
        // assign
        $input = '£1.52p';
        
        // act
        $actual = $this->object->isValid($input);
        
        // assert
        $this->assertTrue($actual);
    }
}